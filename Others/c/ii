#define _GNU_SOURCE
#include<link.h>
#include<dlfcn.h>
#include <stdlib.h>
#include <stdio.h>
typedef struct dl_phdr_info *A;
static int
callback (A info, size_t size, void *data)
{
  int j;

  printf ("name=%s (%d segments)\n", info->dlpi_name, info->dlpi_phnum);

  for (j = 0; j < info->dlpi_phnum; j++) {
    void* addr = (void *) (info->dlpi_addr + info->dlpi_phdr[j].p_vaddr);
    printf ("\t\t header %2d: address=%10p", j, addr);
    Dl_info dlinfo;
    dladdr(addr, &dlinfo);
    printf("\t %s : %s\n", dlinfo.dli_fname, dlinfo.dli_sname);
  }
  char *type;
           int p_type;

           printf("Name: \"%s\" (%d segments)\n", info->dlpi_name,
                      info->dlpi_phnum);

           for (int j = 0; j < info->dlpi_phnum; j++) {
               p_type = info->dlpi_phdr[j].p_type;
               type =  (p_type == PT_LOAD) ? "PT_LOAD" :
                       (p_type == PT_DYNAMIC) ? "PT_DYNAMIC" :
                       (p_type == PT_INTERP) ? "PT_INTERP" :
                       (p_type == PT_NOTE) ? "PT_NOTE" :
                       (p_type == PT_INTERP) ? "PT_INTERP" :
                       (p_type == PT_PHDR) ? "PT_PHDR" :
                       (p_type == PT_TLS) ? "PT_TLS" :
                       (p_type == PT_GNU_EH_FRAME) ? "PT_GNU_EH_FRAME" :
                       (p_type == PT_GNU_STACK) ? "PT_GNU_STACK" :
                       (p_type == PT_GNU_RELRO) ? "PT_GNU_RELRO" : NULL;

               printf("    %2d: [%14p; memsz:%7jx] flags: %#jx; ", j,
                       (void *) (info->dlpi_addr + info->dlpi_phdr[j].p_vaddr),
                       (uintmax_t) info->dlpi_phdr[j].p_memsz,
                       (uintmax_t) info->dlpi_phdr[j].p_flags);
               if (type != NULL)
                   printf("%s\n", type);
               else
                   printf("[other (%#x)]\n", p_type);
           }
  return 0;
}

int
main (int argc, char *argv[])
{
dlopen(argv[1],RTLD_NOW|RTLD_GLOBAL);
  dl_iterate_phdr (callback, 0);

  exit (EXIT_SUCCESS);
}
#if 0


       #define _GNU_SOURCE
       #include <link.h>
       #include <stdlib.h>
       #include <stdio.h>
       #include <stdint.h>

       static int
       callback(struct dl_phdr_info *info, size_t size, void *data)
       {
           return 0;
       }

       int
       main(int argc, char *argv[])
       {
           dl_iterate_phdr(callback, NULL);

           exit(EXIT_SUCCESS);
       }
#endif
int get_libdl_functions()
{
    Elf32_Ehdr *ehdr = libdl_start;
    Elf32_Shdr *shdr, *shdrs_start = (Elf32_Shdr *)(((char *)ehdr) + ehdr->e_shoff);
    Elf32_Sym *symbol, *symbols_start;
    char *strtab = get_dynstr_section();
    int sec_it = 0, sym_it = 0;

    rt_info->dlopen = NULL;
    rt_info->dlsym = NULL;

    if(strtab == NULL)
        return -1;

    for(sec_it = 0; sec_it < ehdr->e_shnum; ++sec_it) {
        // Iterate over all sections to find .dynsym
        shdr = shdrs_start + sec_it;
        if(shdr->sh_type == SHT_DYNSYM)
        {
            // Ok we found the right section
            symbols_start = (Elf32_Sym *)(((char *)ehdr) + shdr->sh_offset);
            for(sym_it = 0; sym_it < shdr->sh_size / sizeof(Elf32_Sym); ++sym_it) {
                symbol = symbols_start + sym_it;
                if(ELF32_ST_TYPE(symbol->st_info) != STT_FUNC)
                    continue;

                if(strncmp(strtab + symbol->st_name, DL_OPEN_NAME, sizeof DL_OPEN_NAME) && !rt_info->dlopen) {
                    //printf("Offset of dlopen: 0x%x\n", symbol->st_value);
                    dlopen = ((char *)ehdr) + symbol->st_value;
                } else if(strncmp(strtab + symbol->st_name, DL_SYM_NAME, sizeof DL_SYM_NAME) && !rt_info->dlsym) {
                    //printf("Offset of dlsym: 0x%x\n", symbol->st_value);
                    dlsym = ((char *)ehdr) + symbol->st_value;
                }

                if(dlopen != 0 && dlsym != 0)
                    return 0;
            }
        }
    }

    return -1;
}

void *get_dynstr_section()
{
    Elf32_Ehdr *ehdr = libdl_start;
    Elf32_Shdr *shdr, *shdrs_start = (Elf32_Shdr *)(((char *)ehdr) + ehdr->e_shoff);
    //^sections headers are not required at runtime, mmap them yourself e_shoff
    char *strtab = ((char *)ehdr) + ((shdrs_start + ehdr->e_shstrndx))->sh_offset; // shoff-> shstrndx .off ..shnum; .off type==STRTAB,name=="dynstr"
    int sec_it = 0;

    for(sec_it = 0; sec_it < ehdr->e_shnum; ++sec_it) {
        // Iterate over all sections to find .dynstr section
        shdr = shdrs_start + sec_it;
        if(shdr->sh_type == SHT_STRTAB && strncmp(strtab + shdr->sh_name, DYNSTR_NAME, sizeof DYNSTR_NAME))
            return ((char *)ehdr) + shdr->sh_offset;
    }

    return NULL;
}
//Linux always loads header into memory,some sections, like the shstrtab, are'nt, but dynsym/str does
//DT_DYNAMIC SYM STR baseA=subtracting the lowest virtual address in a PT_LOAD entry from the lowest mapped segment in the memory map
//so use ld.so link_map by dl_iterate_phdr({baseA,path, dyn}, userdata). https://jmpews.github.io/2016/12/27/pwn/linux进程动态so注入/ gnu.hash 查dlsym, https://github.com/frida/frida-gum/blob/master/gum/backend-linux/gumandroid.c#L983
/*
https://blog.csdn.net/hpp24/article/details/52192639
https://www.cnblogs.com/orange-snow/p/14824095.html
https://www.sunmoonblog.com/2019/06/04/fake-dlopen/
https://fmyy.pro/2020/02/25/Competition/GYCTF/ ROP-hack
https://gslab.qq.com/portal.php?mod=view&aid=163 ELF dlload tamper
https://www.cnblogs.com/bunner/p/14870587.html ptrace, elf execute
https://www.cnblogs.com/xunbu7/p/4178595.html dladdr
https://man7.org/linux/man-pages/man3/dladdr.3.html ^structs

http://sinhub.cn/2020/01/little-talk-about-interoperation-of-python/
https://github.com/gaffe23/linux-inject/blob/master/inject-x86.c ptrace 子进程化,WriteProcMemory；  setregs call asm, int $3 go back dbger,check err 易重构
soname: libc.so.6
rlname: soname.y[.z], libattr.so.1.1.0
dlopen("libc")

库一般放在 /usr/local/lib, /lib/ ; etc/ld.so.conf .prelude 自定
这些定义覆盖默认路径, fakeroot 用户权限 overlayFS 就利用此法

ldconfig刷缓存,读取文件/etc/ld.so.conf, 在各个库目录中, 对共享库设置合适的符号链接(添加/删版本号)

-fPIC 文件大,有更好的平台无关性, 且能 LD_PRELOAD=x.so 覆盖自身函数
gcc -shared -Wl,-soname,libmystuff.so.1 

可以用 elfutils eu-nm ,程序上 libelf 静态， ldd;ltrace 动态检查

变量名只在 .symtab和.dynsym中， linker 和 gdb 需要地址-命名 信息，提供行号,变量表和 跨.o 引用 乃至dlsym(c,"exit")
但运行时只需 .strtab .rodata 等“allocable”段的地址正确，被mmap到内存空间，可 strip 掉静态的symtab, 其包含dynsym

每个程序都从 0x0 开始有独立虚地址空间，通过页表映射到实际内存，32位程序ELF加载到 0x08048000 ，这是IEEE定的

-l attr acl 都是动态PLT链接，无需提供ld表， file /lib/* 只有少数 not stripped
https://blogs.oracle.com/solaris/post/inside-elf-symbol-tables

大部分库都仅保留 nm -D 的引用表，少数连自己的函数也不导出，所以 gcc 自写函数签名也不能链接

运行期 gcc -fpie 利用 PLT/GOT Procedure Linkage Table 动态链接，首先跳到 Global Offset Table 的 _dl_runtime_reasolve 类似dlsym ，然后把PLT预留第一条 jmp 指令重填；所以HTTP服务一般静态链接，更快

其实 PLT是GOT 的子集，函数和全局量都有自节头的偏移=offset , 调用 puts() 相当写参sp+i call puts@plt ，它始终跳到GOT地址，即当前的下一条，加 fn编号

跳转在PLT0 把GOT1=link_Map 的库名加上就凑成 libc:puts 的信息，再跳到 rt_resolve@GOT2 去给 GOT 填加载上分配的地址， PLT 是只读的, -fPIE 或 -fPIC 时它不用GOT,静态加载库到确定地址

可以在 https://www.cnblogs.com/pannengzhi/p/2018-04-09-about-got-plt.html 搜PIC寄存器; GOT0 是 dynamic :dynstr dynsym 段地址，刚才的 GOT 主要指 .got.plt ， plt.got 不知有啥用

代码text,数据在 rodata/data 全0变量bss ，shstrtab,symtab 是给链接器的; ld *.o relocable
https://www.cnblogs.com/xmphoenix/archive/2011/10/23/2221879.html
https://luomuxiaoxiao.com/?p=343
http://blog.chinaunix.net/uid-1835494-id-2831799.html
http://cn.voidcc.com/question/p-okjlezsi-bkb.html read dynstr segv

链接时 ld 会替换 call puts 到 puts@plt


https://sourceware.org/bugzilla/show_bug.cgi?id=16417#c6
*/
/*我想拦截发生在 dlopen() 内部的所有文件系统访问(实现FUSE)

ld.so 在处理 LD_PRELOAD 时已经映射了自己的符号。 拦截初始加载对我来说并不重要，但_dl_*工作函数此时已解析，因此将来的调用会通过它们。我想 LD_PRELOAD太晚了。
malloc绕过了上述问题，因为 malloc() ld.so 内部没有功能 free() ，它只是调用 memset() .
文件系统工作函数，例如__libc_read() ，包含在 ld.so 中是静态的，所以我不能用 -Wl,-wrap,__libc_read 拦截它们.

要构建自己的 ld.so,不是将其链接到包装器中?

--wrap仅在(静态)链接时有效，而您的 ld.so和 libc.so.6和 libdl.so.2都已经链接好
LD_PRELOAD本来可以，但 __open 不看PLT

malloc 是自定的，但调用例如calloc自 dlopen确实通过 PLT ，并可 LD_PRELOAD 注入.

运行时修补。简单地扫描 .text的 ld.so ，并寻找 CALL __open指示。
如 ld.so没有被剥离，那么你可以找到两个内部__open ，以及您想要修补的fn(例如 open_verify 于 dl-load.c )。
一旦找到CALL , mprotect包含它的页面=可写，并填您自己的proxy层的地址(如果需要，可以反过来调用 __libc_open

# dlsym -- get overridden symbol
may use dlsym(dlopen(0, flag)) or dlsym(RTLD_DEFAULT / RTLD_NEXT) for first/2nd symbols
how to get all definitions of given symbol?

MODULEENTRY32, CreateToolhelp32Snapshot, Module32First, Module32Next

AIX:loadquery(L_GETINFO, buffer, size), struct ld_info.
HP-UX:dlget, dlgetname (if you need the module path).
Solaris:ldinfo, Link_map.
*/
void doit (const char* s)
{
    void* obj = dlopen (s, RTLD_LAZY);
    void* fcn = dlsym (obj, "foo");
    if (fcn)
        printf ("Object %s has 'foo' at addr %p\n", *s ? s : "(exe)", fcn);
}    
int cb (struct dl_phdr_info *info, size_t size, void *data)
{
    doit (info->dlpi_name);
    return 0;
}    
// int main (){dl_iterate_phdr (cb, 0);    }
// http://www.tecyle.com/2017/03/03/dlsym%e5%8f%82%e6%95%b0-rtld_next%e8%af%a6%e8%a7%a3/
/*tools
https://www.muppetlabs.com/~breadbox/software/elfkickers.html
http://ruslashev.github.io/elfcat/hello_world.html
https://github.com/namhyung/dwarview/blob/master/main.c
https://github.com/maliubiao/python_elfutils/blob/master/readelf.py

https://github.com/alexandernst/linux-kernel-compatibility-checker

熊猫人和熊猫君
0.9
2018.08.07 19:57:11
字数 313
阅读 6,056
1.获取APP全部自定义类名
最近需要有个需求，涉及到runtime打印所有的自定义类名，那么如何区分自己的类和系统定义的类呢？查了些资料发现可用dladdr来实现，在寒神的XXShield里面也有类似使用；dladdr可获得一个函数所在模块，名称以及地址。
引入头文件 #import <dlfcn.h>

获取自定义类名：

    int numClasses;
    Class * classes = NULL;
    classes = NULL;
    numClasses = objc_getClassList(NULL, 0);
    if (numClasses > 0 )
    {
        static struct dl_info app_info;
        if (app_info.dli_saddr == NULL) {
            dladdr((__bridge void *)[UIApplication.sharedApplication.delegate class], &app_info);
        }
        classes = (__unsafe_unretained Class *)malloc(sizeof(Class) * numClasses);
        numClasses = objc_getClassList(classes, numClasses);
        for (int i = 0; i < numClasses; i++) {
            Class c = classes[i];
            
            struct dl_info self_info = {0};
            dladdr((__bridge void *)c, &self_info);
            
            // 忽略系统函数
            if (self_info.dli_fname == NULL || strcmp(app_info.dli_fname, self_info.dli_fname)) {
            }else{
            //自定义函数
            NSLog(@"%s", class_getName(c));
            }
        }
        free(classes);
    }
当dladdr((__bridge void *)[self class], &self_info)中的self为我们自定义的一个UIViewController的时候。
self_info.dli_fname打印出的为模块路径：

/Users/ganvinalix/Library/Developer/CoreSimulator/Devices/13BD3F3B-2C8C-40BB-8CC1-96C71FD0CBBF/data/Containers/Bundle/Application/DF26258E-2F6F-418F-80C3-751D03FD1F21/XXShield_Example.app/XXShield_Example
当dladdr((__bridge void *)[NSObject class], &self_info);NSObject是系统SDK函数。
self_info.dli_fname打印出的为模块路径：

"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/libobjc.A.dylib"
app_info.dli_fname打印出的为模块路径：

"/Users/ganvinalix/Library/Developer/CoreSimulator/Devices/13BD3F3B-2C8C-40BB-8CC1-96C71FD0CBBF/data/Containers/Bundle/Application/3D34D2D9-4556-4E0B-93F4-08034E9975A4/XXShield_Example.app/XXShield_Example"
总之就是要比较的类的dli_fname，如果和app的sharedApplication.delegate类的dli_fname相同就为自定义类，否则为系统SDK类

当然dladdr还可以做一些安全验证方面的事情。推荐庆哥早期文章，iOS安全–验证函数地址，检测是否被替换，反注；
http://www.blogfshare.com/ioss-validate-address.html

2.打印APP加载的所有动态链接库的名称与大小等相关信息
#include <mach-o/getsect.h>
#include <mach-o/loader.h>
#include <mach-o/dyld.h>
#include <dlfcn.h>
#import <objc/runtime.h>
#import <objc/message.h>
#include <mach-o/ldsyms.h>

NSArray<NSString *>* KGReadConfiguration(char *sectionName,const struct mach_header *mhp);

static uint32_t _image_header_size(const struct mach_header *mh)
{
    bool is_header_64_bit = (mh->magic == MH_MAGIC_64 || mh->magic == MH_CIGAM_64);
    return (is_header_64_bit ? sizeof(struct mach_header_64) : sizeof(struct mach_header));
}

static void _image_visit_load_commands(const struct mach_header *mh, void (^visitor)(struct load_command *lc, bool *stop))
{
    assert(visitor != NULL);
    
    uintptr_t lc_cursor = (uintptr_t)mh + _image_header_size(mh);
    
    for (uint32_t idx = 0; idx < mh->ncmds; idx++) {
        struct load_command *lc = (struct load_command *)lc_cursor;
        
        bool stop = false;
        visitor(lc, &stop);
        
        if (stop) {
            return;
        }
        
        lc_cursor += lc->cmdsize;
    }
}

static uint64_t _image_text_segment_size(const struct mach_header *mh)
{
    static const char *text_segment_name = "__TEXT";
    
    __block uint64_t text_size = 0;
    
    _image_visit_load_commands(mh, ^ (struct load_command *lc, bool *stop) {
        if (lc->cmdsize == 0) {
            return;
        }
        if (lc->cmd == LC_SEGMENT) {
            struct segment_command *seg_cmd = (struct segment_command *)lc;
            if (strcmp(seg_cmd->segname, text_segment_name) == 0) {
                text_size = seg_cmd->vmsize;
                *stop = true;
                return;
            }
        }
        if (lc->cmd == LC_SEGMENT_64) {
            struct segment_command_64 *seg_cmd = (struct segment_command_64 *)lc;
            if (strcmp(seg_cmd->segname, text_segment_name) == 0) {
                text_size = seg_cmd->vmsize;
                *stop = true;
                return;
            }
        }
    });
    
    return text_size;
}

static const uuid_t *_image_retrieve_uuid(const struct mach_header *mh)
{
    __block const struct uuid_command *uuid_cmd = NULL;
    
    _image_visit_load_commands(mh, ^ (struct load_command *lc, bool *stop) {
        if (lc->cmdsize == 0) {
            return;
        }
        if (lc->cmd == LC_UUID) {
            uuid_cmd = (const struct uuid_command *)lc;
            *stop = true;
        }
    });
    
    if (uuid_cmd == NULL) {
        return NULL;
    }
    
    return &uuid_cmd->uuid;
}

static void _print_image(const struct mach_header *mh, bool added)
{
    Dl_info image_info;
    int result = dladdr(mh, &image_info);
    
    if (result == 0) {
        printf("Could not print info for mach_header: %p\n\n", mh);
        return;
    }
    
    const char *image_name = image_info.dli_fname;
    
    const intptr_t image_base_address = (intptr_t)image_info.dli_fbase;
    const uint64_t image_text_size = _image_text_segment_size(mh);
    
    char image_uuid[37];
    const uuid_t *image_uuid_bytes = _image_retrieve_uuid(mh);
    uuid_unparse(*image_uuid_bytes, image_uuid);
    
    const char *log = added ? "Added" : "Removed";
    printf("%s: 0x%02lx (0x%02llx) %s <%s>\n\n", log, image_base_address, image_text_size, image_name, image_uuid);
}

static void dyld_callback(const struct mach_header *mhp, intptr_t vmaddr_slide)
{
    _print_image(mhp, true);
}

//注册main之前的析构函数,析构函数仅爱周注解才能生效
__attribute__((constructor))
void initProphet() {
    //动态链接库加载的时候的hook，可能会回调次数比较多，可能不建议
    _dyld_register_func_for_add_image(dyld_callback);
}

*/

#include <linux/kd.h>

#include <sys/ioctl.h>
#include <unistd.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define	CONSOLE	"/dev/tty0"

int
main(int argc, char **argv)
{
  int	i;
  long	pitch, ms, w;
  int	fd;

  fd	= 1;
  if (ioctl(fd, KDMKTONE, 0))
    fd	= open(CONSOLE, O_RDONLY);
  if (fd<0)
    {
      perror(CONSOLE);
      return 1;
    }
  for (i=1; i<argc; )
    {
      pitch	= 0;
      ms	= 0;
      w		= 0;
      sscanf(argv[i], "%ld:%ld:%ld", &pitch, &ms, &w);
      if (pitch)
	pitch	= 1193180 / pitch;
      if (!ms)
	ms	= 100;
      if (!w)
	w	= ms;
      ioctl(fd, KDMKTONE, (ms<<16)|pitch);
      if (++i<argc || w)
	usleep((w ? w : ms)*1000);
    }
  return 0;
}
