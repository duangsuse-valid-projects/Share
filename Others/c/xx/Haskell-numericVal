#Haskell 啊，我真的是傻逼愚蠢万恶，我居然没有意识到自己弄出来的算法是多么的弱智... 真正的 Haskeller 只一行比我 5 行（虽然不是一个算法... 但 atoi 的算法我之前都没有想出来过）都要强，人和人之间的差距啊...

吃饭的时候一直在想那个我自己看了都有自觉点简单的 Haskell 程序，但是我之前甚至都以为那很复杂... 而且今天都看漏了一个 point-free 参数没明确写出来...

import Data.Char (digitToInt)

numVal :: Int -> String -> Int
numVal base = foldl (\n x -> base*n + (digitToInt x)) 0

进行化简，发现 ((digitToInt :: Char -> Int) x :: Char) 和后面的 (...+) :: Int -> Int，可以用 compose；转化 \n x -> 为 \n 两边约掉个隐式输入参数 x...

numVal' :: Int -> String -> Int
numVal' base = fold (\n -> (base*n +) . digitToInt) 0

泛化以后是原来的样子，是实际工程的 Haskell 大佬写的，我真是... 啊！！！！（土拨鼠尖叫）

numberVal :: Integral i => Int -> String -> i
numberVal base = foldl (\n -> (fromIntegral base*n +) . fromIntegral . digitToInt) 0

其中两个 fromIntegral :: (Integral a, Num b) => a -> b 是为了统一计算类型

最重要的是 11(10) 这种，我一直没有注意到，其实 base 计数还有一层含义就是 forall lit. (head lit) 的数值是 (tail lit) 的同（一位）数值代表的 base 倍... 所以说 foldl 就可以了，而且无需 rewrite base 本身，利用性质

0b100 = 1* (2*2) + {- ommited -} = 1* (2**2) + 0* (2**1) + 0* (2**0)

11 = 1*10 + 1
201 = 2*100 + 0*10 + 1

就可以了，我之前也想过这个问题，但我的解决方案不是每一层叠上一个 (base*) （最终实际上第 n 层就有 (sub n) . length 个 (base *) 了...），是利用 [(Int, Int)] 去传，然后再归纳回来...
而且还不那么 immediate... 我还思考不出来，真是弱智啊

这个性质我怎么就不明白呢...

----

之前是真的不知道，居然还有这种构造数值的技巧，而这个 *base 恰巧还是我刚看到想了后的时候觉得不对的地方，因为 -- 这怎么正确呢？ d0 d1 d2 数位全都 *base，而不是倒过来，每个数位 *上升的 base，这么简单的做法肯定是不对的！

但后来想想，base=10，d0 位置的数字最终被 *10*10 = 10**2、d1 被 *10、d2 没被乘，实际上就是分开叠加 map (10*)
我之前知道每一位的『1』数值都是下一位的『base』才能换到的，所以应该 foldl，然后加一个元组啦，转来转去的还不 efficient。

101(10)
= (1*10^2) + (0*10^1) + (1*10^0)
= ((1 *10) + 0) *10 + 1 = 101

我怎么就只知其一不知其二呢？我怎么就不知道 ((1 * 10 + 2) * 10) = 1*100+2*10 呢？？到底是不知道技巧，不知道还能有这种变换方式

怎么得出这个简单的结论，由此写出比别人短十行好看十倍的代码，这才是简单背后最复杂的事情啊！

虽然只是一个小问题，真的是相当受教了。

人和人之间的差距到底是什么，就叫理论大佬列几个式子让学生写、FP 大佬列引两条式子，费三四分钟写一行、OI 大佬想一分钟费五分钟写七八行 pass、你断断续续想半天，最后写十分钟改两分钟，最终成品四五行、小部分人想五分钟写十分钟暴力查错二十分钟弄出来十几行易错/难维护/难看懂/低性能的代码、绝大部分人想半天觉得莫名其妙，查下资料抄过来解决，找不到就玩完了、少部分人，完全写不出来。

我觉得人和人之间的差距，不是体现在你看过什么/见过什么/做过什么、
不是体现在什么你会、别人花个两分钟/十分钟/三五天学习训练也能做出来的事情，而是在那些你即得易见平凡，别人想破脑袋也弄不懂/懒得想的事情上。

真正的大佬是有『本事』的，本事就是自己的事业，不是自己的职业；本事就是那一块区域内『自己独有』的东西，其他人都替代不了的东西。

一件事情，你会，别人花个几分钟也能完成。凭什么要你？凭几分种多打几下键盘的速度？凭能加班不推脱的承诺？新时代农民工，争的就是『勤奋努力』，可是这么做辛苦了自己，也委屈了用你成品的人。

可是什么事情不是单单靠蛮力就可以解决的，被承认可以，但是优秀岂止靠一个『你很用功』就能达到的。“不要用战术上的勤奋掩盖战略上的懒惰”

我眼里，优秀就是你能干别人不能干的事情，而别人也可以干的事情，你做的效率上比别人快、质量上比别人好、工作上比别人勤奋、结果比别人稳，『要体现出个梯度』，这个梯度才是你『优秀』的资本，一些你无法被替代的理由。



